generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" // or "mysql" or "sqlite", depending on your database
    url      = env("DATABASE_URL")
}

model User {
    id                  String       @id @default(cuid())
    email               String       @unique
    password            String?
    name                String?
    username            String       @unique
    image               String?
    emailVerified       DateTime?
    userProfile         UserProfile?
    githubConnected     Boolean      @default(false)
    githubUsername      String?
    sessions            Session[]
    accounts            Account[]
    activites           Activity[]
    createdAt           DateTime     @default(now())
    updatedAt           DateTime     @updatedAt

    createChallenges    Challenge[]  @relation("ChallengeCreator")
    submissions         Submission[]
    challengeAttempts   ChallengeAttempt[]
    challengeLikes      ChallengeLike[]
}

model UserProfile {
  id                String     @id @default(cuid())
  userId            String     @unique
  rank              Int
  bio               String     @default("No bio provided")
  phone             String?
  solved            Int
  user              User       @relation(fields: [userId], references: [id])
  preferredLanguage String
  level             Int
  points            Int
  streakDays        Int
  badges            Badge[]
  languages         Language[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Activity {
    id              String      @id @default(cuid())
    userId          String
    user            User        @relation(fields: [userId], references: [id])
    type            String
    name            String
    result          String
    points          Int
    time            String
    createdAt       DateTime    @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Badge {
  id          String        @id @default(cuid())
  name        String
  description String
  iconType    String
  points      Int
  users       UserProfile[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Language {
  id          String        @id @default(cuid())
  name        String
  percentage  Float
  userProfile UserProfile[]
  challenges  Challenge[]    @relation("ChallengeLanguages")
  submissions Submission[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Challenge {
  id              String            @id @default(cuid())
  title           String
  description     String            @db.Text
  difficulty      Difficulty
  points          Int
  creatorId       String
  creator         User              @relation("ChallengeCreator", fields: [creatorId], references: [id])
  testCases       TestCase[]
  languages       Language[]        @relation("ChallengeLanguages")
  submissions     Submission[]
  attempts        ChallengeAttempt[]
  likes           ChallengeLike[]
  category        ChallengeCategory @relation(fields: [categoryId], references: [id])
  categoryId      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  starterCode     Json              // Map of language ID to starter code
  handlerCode     Json
  timeLimit       Int               // Time limit in seconds
  memoryLimit     Int               // Memory limit in MB
}

model ChallengeCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  challenges  Challenge[]
}

model TestCase {
  id          String    @id @default(cuid())
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  input       String    @db.Text
  output      String    @db.Text
  isHidden    Boolean   @default(false)
  explanation String?   @db.Text
}

model Submission {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  code        String    @db.Text
  languageId  String
  language    Language  @relation(fields: [languageId], references: [id])
  status      SubmissionStatus
  runtime     Int?      // in milliseconds
  memory      Int?      // in KB
  createdAt   DateTime  @default(now())
  testResults Json?     // Results of each test case
}

model ChallengeAttempt {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  successful  Boolean?
}

model ChallengeLike {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  isLike      Boolean   // true for like, false for dislike
  createdAt   DateTime  @default(now())

  @@unique([userId, challengeId])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}